// AUTHOR: Helena Wang
// FILENAME: P1.cs
// DATE: 4/14/2018
// REVISION HISTORY: 1  

// Overview: 
// This class is responsible for encrypting word of which users input. 

// Functionality: 
// This class has a constructor of initialize the encryptWord object, has 
// turnOnEncryptWord to turn on the encrypt, has turnOffEncryptWord to turn
// off the encrypt, has ifEncryptIsOn to check if the encrypt is on or not, 
// has guessShiftNum to let the user guess the shift number, has  reset
// function to reset the shift number to 0 and erase all the statistic data, 
// has get function to get number of queries, high guesses, low guesses and
// average ‘guess value’, has encryptWord to encrypt word and has decode 
// function to decode word. 

// Legal states: 
// the word could be encoded only when the state is on
// when the state is off, the word cannot be encrypted

// anticipated use: for any game need the encrypt function and decode function.

// data process: 
// Each time it get a word from a user input or a file which user passed in, 
// then, it does encryptWord function to encrypt the word or does decode 
// function to decode the word. Also it will do some statistic like calculating 
// the number of queries, high guesses, low guesses and average guess value,  
// this statistic will be provided to users when they use guess function and 
// get function.

// legal input and illegal input: 
// every word cannot be less than 4 letters; the word could and ONLY could consist
// of lOWER case letters; In the other word, no symbol, no number and no UPPER 
// case letter. 

// Output: there will be three output, one is the encrypt word, another one is 
// decode word, and the third one is statistic information.

// Dependency: no dependent

// Assumptions: 
// For the input: Every word only can be shift among lowercase letters. So the 
// shift number is the one only between 1 to 25. Base on this rule, the input 
// should only consist of lowercase letters. Moreover, the input word should 
// no less than 4 letters. 
// All input numbers are positive integers.
// For the statistic information: These information is depend on object. In 
// other word, if the user start to play the game, it will do the statistic of
// his/her play data until he/she quit the game. Once the game is quit, the 
// statistic information will reset to be zero.
// the object is always be off at the first time use it
// users need to turn on the state when they use this program 
// this object cannot compare, copy, add, minus

// "What is legal input?
// The word which only consists of lowercase letters and its length is no less
// than 4.
// What is illegal input? 
// The word which consists numbers, symbols and Uppercase letters or its length
// is less than 4.
// What happens when illegal input is received? 
// The program will ignore it and let them be null, in fact, like "".
// What output is given?"
// If the input is legal, the output will be what they should be like after 
// encrypted. If it is illegal, the output will be nothing, just blank.

// Interface invariants:
// Fields cannot be get directly for private type.
// EncryptWord, decode, getRandomNum, checkInputLengthValidation, 
// checkInputValidation method cannot be used for private type.
// Constructor doesn't support any value to passed in.
// This class cannot used to encode or decode the word which consists of 
// symbol, uppercase letter and number.
// EncryWord and decode method accept one word each time.
// EncryWord and decode method only accept the word which is made up of 
// lowercase letters and its length is no less than 4.
// The range of shift number is between 1 and 25. 
// The shift number will be generated by random.
// Rule of generating shift number - The first round of shift number start
// from 1 to 10, then the high range will added 3 each time when the 
// resetShifNum method called. When the shift number is larger than 25, it 
// will go back to the first round, and the reset times will be set to zero.
// Then repeat this process.
// Reset method cannot be used after EncryWord method before guessShiftNum
// method, or the shift number will be changed.
// decodeEncryptWord method is only used to turn the encrypted word into 
// original version
// Every time before the encode method used, you need to check if the
// encryptedWord is on or not, or you should turnOnEncryptWord
// 

using System;
using System.Collections.Generic;
using System.Text;


namespace p1
{

    public class EncryptedWord
    {
        private const int INITIAL_SHIFT_NUM = 0;           // the initial shift number
        private const int MAX_RANGE = 26;                  // the Max of random
        private const int HIGH_RANGE = 10;                 // the high of random
        private const int LOW_RANGE = 1;                   // the min of random
        private const int ADD_RESET_SHIFT_NUM = 3;         // the number will be added to shift 
                                                          // num when reset shift num
        private const char ENCRYPT_START_LETTER = 'a';     // the encrypt start letter
        private const char ENCRYPT_END_LETTER = 'z';       // the encrypt end letter
        private const int INPUT_LENGTH_LOW = 4;            // the min amount of word consist
                                                          // of letter  

        private int shiftNum;          // the shift number which is used to encrypt
        private int highGuessCount;    // the number of high guess
        private int lowGuessCount;     // the number of low guess
        private int guessTimes;        // the number of queries
        private double aveGuessVal;    // the average value of guess answer

        // This constructor is used to initialize the encryptWord object
        // precondition   EncryptWord should be created 
        // postcondition  the object of EncryptWord is initialized
        //                shiftNum is 0; resetTimes is 0; highGuessCount is 0;
        //                lowGuessCount is 0; guessTimes is 0; aveGuessVal is 0.0
        public EncryptedWord()
        {
            shiftNum = INITIAL_SHIFT_NUM;
            highGuessCount = 0;
            lowGuessCount = 0;
            guessTimes = 0;
            aveGuessVal = 0.0;
        }

        // This function is used to turn on the encryptWord 
        // precondition   EncryptWord object is created
        // postcondition  shift number is set by random, the max range of it is 
        //                between 1 and 25
        public void TurnOnEncryptWord()
        {
            shiftNum = GetRandomNum();
        }

        // This function is used to turn off the encryptWord 
        // precondition   state is on
        // postcondition  shift number is set to 0
        public void TurnOffEncryptWord()
        {
            shiftNum = INITIAL_SHIFT_NUM;
        }

        // This function is used to encrypt word by shift number and return the
        // encrypted word
        // precondition   make sure state is on
        //                the string should only consists of lowercase letters
        //                and its length must no less than 4. 
        // postcondition  the word is shifted over shiftNum times and only consists 
        //                of lowercase letters and its length is no less than 4
        public string StartEncryptWord(string target)
        {
            return EncodeWord(target);
        }

        // This function is used to decode word by shift number and return the 
        // decode word 
        // precondition   the string should only consists of lowercase letters
        //                and its length must no less than 4
        //                the state is on
        // postcondition  the word is shifted forward shiftNum times and only 
        //                consists of lowercase letters and its length is no 
        //                less than 4 
        //                the word is the same as the original version which before
        //                encoded
        public string DecodeEncryptWord(string target)
        {
            return Decode(target, shiftNum);
        }

        // This function is used to decode word by the number guessed by user  
        // and return the decode word 
        // precondition   the string should only consists of lowercase letters
        //                and its length must no less than 4
        //                the guess number should be positive integer
        // postcondition  the word is shifted forward shiftNum times and only 
        //                consists of lowercase letters and its length is no 
        //                less than 4 
        public string DecodeEncryptWordInGivenNum(string target, int guessNum)
        {
            return Decode(target, guessNum);
        }

        // This function is used to check if the encryptWord is on or not and 
        // return true if it is on, otherwise false
        // precondition   none
        // postcondition  true if the state is on,
        //                otherwise false
        public bool IfEncryptIsOn()
        {
            bool flag = false;
            if (shiftNum != 0)
            {
                flag = true;
            }
            return flag;
        }

        // This function is used to let the user guess the shift number and return
        // true if the number equals to the generate shift number, otherwise false
        // It also calculate the number of queries, high guesses, low guesses and
        // average ‘guess value’
        // precondition    input guess number is a positive integer
        // postcondition   calculate the number of queries, high guesses, low  
        //                 guesses and average ‘guess value’
        //                 return true if the guess number equals to the generate 
        //                 shift number, 
        //                 otherwise false
        public bool GuessShiftNum(int num)
        {
            bool flag = false;         // the initial boolean value of function
            if (num > shiftNum)
            {
                highGuessCount++;
                guessTimes++;
            }
            else if (num < shiftNum)
            {
                lowGuessCount++;
                guessTimes++;
            }
            else
            {
                guessTimes++;
                flag = true;
            }
            aveGuessVal = (aveGuessVal * (guessTimes - 1) + num) / guessTimes;
            return flag;
        }

        // This function is used to reset the shift number to initial value and  
        // erase all the statistic data
        // precondition    none
        // postcondition   shiftNum is 0; resetTimes is 0; highGuessCount is 0;
        //                 lowGuessCount is 0; guessTimes is 0; aveGuessVal is 0.0
        public void Reset()
        {
            highGuessCount = 0;
            lowGuessCount = 0;
            guessTimes = 0;
            aveGuessVal = 0.0;
        }

        // This function is used to get the number of queries and return it
        // precondition    none
        // postcondition   the number of queries
        public int GetQueryCount()
        {
            return guessTimes;
        }

        // This function is used to get the number of high guesses and return it
        // precondition    none 
        // postcondition   get the number of high guesses 
        public int GetHighGuessCount()
        {
            return highGuessCount;
        }

        // This function is used to get the number of low guesses and return it
        // precondition    none
        // postcondition   get the number of low guesses
        public int GetLowGuessCount()
        {
            return lowGuessCount;
        }

        // This function is used to get average ‘guess value’ and return it
        // precondition    none
        // postcondition   get average ‘guess value’  
        public double GetAveGuessVal()
        {
            return aveGuessVal;
        }

        // This function is used to encrypt word by shift number and return the
        // encode word (private, cannot get directly)
        // precondition   make sure state is on
        //                the string should only consists of lowercase letters
        //                and its length must no less than 4. 
        // postcondition  the word is shifted over shiftNum times and only consists 
        //                of lowercase letters and its length is no less than 4
        private string EncodeWord(string target)
        {
            char letterNeedToBeEncrypt;
            int letterTransferToNum;
            int letterAfterEncryptTransferToNum;
            string encryptWord = "";

            for (int i = 0; i < target.Length; i++)
            {
                letterNeedToBeEncrypt = target[i];
                letterTransferToNum = (int) letterNeedToBeEncrypt;
                letterAfterEncryptTransferToNum = letterTransferToNum + shiftNum;
                if (letterAfterEncryptTransferToNum > (int) ENCRYPT_END_LETTER)
                {
                    letterAfterEncryptTransferToNum = letterAfterEncryptTransferToNum -
                        (int)ENCRYPT_END_LETTER + (int)ENCRYPT_START_LETTER - 1;
                }
                encryptWord += (char)letterAfterEncryptTransferToNum;
            }
            return encryptWord;
        }

        // This function is used to decode word by shift or guessing number and  
        // return the decode word (private, cannot get directly)
        // precondition   the string should only consists of lowercase letters
        //                and its length must no less than 4. 
        // postcondition  the word is shifted forward shiftNum times and only 
        //                consists of lowercase letters and its length is no 
        //                less than 4
        private string Decode(string target, int num)
        {
            char letterNeedToBeDecode;
            int letterTransferToNum;
            int letterAfterDecodeTransferToNum;
            string decodeWord = "";
            
            for (int i = 0; i < target.Length; i++)
            {
                letterNeedToBeDecode = target[i];
                letterTransferToNum = (int)letterNeedToBeDecode;
                letterAfterDecodeTransferToNum = letterTransferToNum -
                    num;
                if (letterAfterDecodeTransferToNum < (int)ENCRYPT_START_LETTER)
                {
                    letterAfterDecodeTransferToNum =
                        (int)ENCRYPT_END_LETTER -
                        ((int)ENCRYPT_START_LETTER -
                            letterAfterDecodeTransferToNum) + 1;
                }
                decodeWord += (char)letterAfterDecodeTransferToNum;
            }
            return decodeWord;
        }

        // This function is responsible for getting random shift number and return
        // the generated shift number (private, cannot get directly)
        // precondition    none
        // postcondition   the range of shift number is from 1 to 26 
        private int GetRandomNum()
        {
            int randomNum;
            Random number = new Random();
            randomNum = number.Next(LOW_RANGE, MAX_RANGE);

            return randomNum;
        }

        // This function is responsible for checking input word length and return
        // true if valid or false if invalid (private, cannot get directly)
        // precondition    none
        // postcondition   true if the passed in word is not less than 4 letters
        //                 otherwise false
        private bool CheckInputLengthValidation(string target)
        {
            bool flag = true;
            if (target.Length < INPUT_LENGTH_LOW)
            {
                flag = false;
            }
            return flag;
        }

        // This function is responsible for checking input validation and return
        // true if valid or false if invalid (private, cannot get directly)
        // precondition    none
        // postcondition   true if the passed in word only consists of lowercase 
        //                 letters, otherwise false
        private bool CheckInputValidation(int letterTransferToNum)
        {
            bool flag = true;
            if (letterTransferToNum < (int) ENCRYPT_START_LETTER || 
                letterTransferToNum > (int) ENCRYPT_END_LETTER)
            {
                flag = false;
            }
            return flag;
        }

    }
}
